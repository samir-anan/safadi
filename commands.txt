php artisan generate:key
php artisan config:cache    -> create application cache
php artisan config:clear    -> clear application cache
    - clear will delete cache directory => bootstrap/cache/config


php artisan make:controller ControllerName
php artisan make:migration create_stores_table
    - tables names in plural
php artisan migrate
    - php artisan migrate:rollback  -> run the command in down() function
    - php artisan migrate:status    -> migrations status
    - php artisan migrate:reset     -> delete all migrations
    - php artisan migrate:refresh   -> rollback all migrations then migrate it
    - php artisan migrate:fresh     ->  drop all tables then migrate it

php artisan make:model ModelName
    - models names in Capital Singular
    - php artisan make:model ModelName -m       -> create migration file

php artisan make:seeder UserSeeder
    - php artisan db:seed                       -> run seeds in DatabaseSeeder Class in run() method
Model properties
    protected $table = 'stores';                ->  connect with assigned table name
    protected $connection = 'mysql';            ->  from config/database
    protected $primaryKey = 'id';
    public $incrementing = true;
    public $timestamps = true;

 composer require laravel/breeze --dev


Blade Directives
    - @csrf = {{ csrf_field() }} = <input type="hidden" name="_token" value="{{ csrf_token() }}">
    - @auth ... @endauth            -> if authennticated user   if(Auth::check())
    - @guest ... @endguest          -> if guest user


- middleware define in controller constructor or routes
-  <input type="hidden" name="_token" value="{{ csrf_token() }}"> == {{ csrf_field() }} or @csrf

FileUpload:
- storage/app       => default local disk path not public
- storage/public    => default local disk path public
- $request->merge add new value not in request, never update exist value

- using store method => for crate random name

     $data = $request->except('image');
        if ($request->hasFile('image')){
            $file = $request->file('image');
           // $path = $file->store('uploads','public'); // store in "uploads" directory in default disk with random name
            $path = $file->store('uploads',['disk' => 'public']); // other way
            $data['image'] = $path;
        }

- using storeAs method => for create Custom name


file systems :
    storage_path('app')     => storage/app
    public_path('uploads')  => public/uploads
