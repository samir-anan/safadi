php artisan generate:key
php artisan config:cache    -> create application cache
php artisan config:clear    -> clear application cache
    - clear will delete cache directory => bootstrap/cache/config


php artisan make:controller ControllerName
php artisan make:migration create_stores_table
    - tables names in plural
php artisan migrate
    - php artisan migrate:rollback  -> run the command in down() function
    - php artisan migrate:status    -> migrations status
    - php artisan migrate:reset     -> delete all migrations
    - php artisan migrate:refresh   -> rollback all migrations then migrate it
    - php artisan migrate:fresh     ->  drop all tables then migrate it

php artisan make:model ModelName
    - models names in Capital Singular
    - php artisan make:model ModelName -m       -> create migration file

php artisan make:seeder UserSeeder
    - php artisan db:seed                       -> run seeds in DatabaseSeeder Class in run() method
Model properties
    protected $table = 'stores';                ->  connect with assigned table name
    protected $connection = 'mysql';            ->  from config/database
    protected $primaryKey = 'id';
    public $incrementing = true;
    public $timestamps = true;

 composer require laravel/breeze --dev


Blade Directives
    - @csrf = {{ csrf_field() }} = <input type="hidden" name="_token" value="{{ csrf_token() }}">
    - @method('delete') = <input type="hidden" name="_method" value="delete">
    - @auth ... @endauth            -> if authenticated user   if(Auth::check())
    - @guest ... @endguest          -> if guest user


- middleware define in controller constructor or routes
-  <input type="hidden" name="_token" value="{{ csrf_token() }}"> == {{ csrf_field() }} or @csrf


 Controllers

 Store Method
    $request->name;
    $request['name'];
    $request->query('name');
    $request->get('name');
    $request->post('name');
    $request->input('name');
    $request->only(['name','parent_id']);
    $request->except(['name','image']);
    $request->all();

    $category = new Category();
    $category-> name = $request->post('name');
    $category-> parent_id = $request->post('parent_id');
    $category->save();

    $category = new Category([
       'name' => $request->post('name'),
       'parent_id' => $request->input('parent_id'),
       'description' => $request->description,
    ]);
    $category->save();
    $category = new Category($request->all());
    $category->save();

    $request->merge([
       'slug' => $request->name
    ]);

    $category = Category::create($request->all()); // use mass assignment must assign fillable properties
    return redirect()->route('categories.index');
    return Redirect::route('categories.index');




